#!/usr/bin/env python
"""
Script to manage soundforest music playlitss
"""

import os

from systematic.shell import normalized, Script, ScriptError
from soundforest.database.models import Playlist, PlaylistSource, SoundForestDB, SoundForestDBError

USAGE = """Usage: %(script)s [options] tree paths

Manage music file playlists in soundforest sqlite database."""

script = Script()
script.set_usage(USAGE % {'script': script.name})
script.add_argument('-l', '--list', action='store_true', help='List trees')
script.add_argument('-r', '--register', action='store_true', help='Register playlist directory')
script.add_argument('-u', '--unregister', action='store_true', help='Unregister playlist directory')
script.add_argument('-s', '--scan-updates', action='store_true', help='Scan trees')
script.add_argument('-S', '--playlist-source', default='filesystem', help='Playlist source')
script.add_argument('paths', nargs='*', help='Paths to process')
args = script.parse_args()

if args.register and args.unregister:
    script.exit(1, 'Flags --register and --unregister conflict.')

try:
    db = SoundForestDB()
except SoundForestDBError, emsg:
    db = None
    script.exit(1, emsg)

if args.register:
    for path in args.paths:
        script.log.debug('Registering: %s' % path)
        pls = db.register_playlist_source(args.playlist_source, path)

elif args.unregister:
    for path in args.paths:
        script.log.debug('Unregistering: %s' % path)
        pls = db.unregister_playlist_source(args.playlist_source, path)

all_sources = db.get_playlist_sources()
if not args.paths:
    sources = all_sources
else:
    sources = []
    for arg in args.paths:
        try:
            pls = filter(lambda x:
                x.name==args.playlist_source and x.path==arg,
                all_sources
            )[0]
        except IndexError:
            script.exit(1, 'Invalid playlist source name: %s' % arg)

if args.scan_updates:
    for pls in sources:
        script.log.info('Updating playlist source: %s' % pls.path)
        source_lists = pls.playlists
        for (root, dirs, files) in os.walk(pls.path):
            for f in files:
                if os.path.splitext(f)[1][1:] not in ['m3u', 'm3u8', 'pls']:
                    continue
                f = os.path.join(root, f)
                try:
                    playlist = filter(lambda x: x.path==f, source_lists)[0]
                except IndexError:
                    playlist = pls.add_playlist(f)
                entries = filter(lambda x:
                    x.strip()!='' and not x.startswith('# '),
                    open(f, 'r').read().split('\n')
                )
                if not len(entries):
                    continue
                script.log.debug('Updating playlist %s' % f)
                playlist.update(entries)

if args.list:
    for pls in sources:
        print pls
        for pl in pls.playlists:
            print pl


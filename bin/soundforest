#!/usr/bin/env python
# coding=utf-8
"""
Soundforest database manipulation tool
"""

import os
import sys
import re
import shutil
import argparse

from soundforest import SoundforestError
from soundforest.cli import Script, ScriptCommand, ScriptError

class CodecsCommand(ScriptCommand):
    def __init__(self, script):
        name = 'codecs'
        description = 'Codec database manipulations'
        mode_flags = []
        ScriptCommand.__init__(self, script, name, description, mode_flags)
        self.parser.add_argument('-l', '--list', action='store_true', help='List codecs in database')
        self.parser.add_argument('-v', '--verbose', action='store_true', help='Verbose details')

    def parse_args(self, args):
        ScriptCommand.parse_args(self, args)

        if args.list:
            for name, codec in self.script.db.codecs.items():
                print '%s (%s)' % (codec, codec.description)
                print 'Extensions'
                print '  %s' %  ','.join(x.extension for x in codec.extensions)
                print 'Decoders'
                for decoder in codec.decoders: print '  ', decoder.command
                print 'Encoders'
                for encoder in codec.encoders: print '  ', encoder.command
                print

class TagsCommand(ScriptCommand):
    def __init__(self, script):
        name = 'tags'
        description = 'Track tag database manipulations'
        mode_flags = []
        ScriptCommand.__init__(self, script, name, description, mode_flags)
        self.parser.add_argument('-l', '--list', action='store_true', help='List trees in database')
        self.parser.add_argument('-t', '--tree', help='Tree to match')
        self.parser.add_argument('paths', nargs='*', help='Paths to trees to process')

    def parse_args(self, args):
        ScriptCommand.parse_args(self, args)

        if args.list:
            if args.tree:
                trees = [self.script.db.get_tree(args.tree)]
            else:
                trees = self.script.db.trees

            for tree in trees:
                for track in tree.tracks:
                    print track.path
                    for entry in track.tags:
                        print '  %s = %s' % (entry.tag, entry.value)


class TracksCommand(ScriptCommand):
    def __init__(self, script):
        name = 'tracks'
        description = 'Tree database manipulations'
        mode_flags = []
        ScriptCommand.__init__(self, script, name, description, mode_flags)
        self.parser.add_argument('-l', '--list', action='store_true', help='List trees in database')
        self.parser.add_argument('-t', '--tree', help='Tree to match')

    def parse_args(self, args):
        ScriptCommand.parse_args(self, args)

        if args.list:
            if args.tree:
                trees = [self.script.db.get_tree(args.tree)]
            else:
                trees = self.script.db.trees

            for tree in trees:
                print tree
                for track in tree.tracks:
                    print '  %s' % track.relative_path


class TreeCommand(ScriptCommand):
    def __init__(self, script):
        name = 'tree'
        description = 'Tree database manipulations'
        mode_flags = []
        ScriptCommand.__init__(self, script, name, description, mode_flags)
        self.parser.add_argument('-r', '--register', action='store_true', help='Register trees')
        self.parser.add_argument('-d', '--deregister', action='store_true', help='UnRegister trees')
        self.parser.add_argument('-l', '--list', action='store_true', help='List trees in database')
        self.parser.add_argument('-u', '--update', action='store_true', help='Update trees')
        self.parser.add_argument('paths', nargs='*', help='Paths to trees to process')

    def parse_args(self, args):
        ScriptCommand.parse_args(self, args)

        if args.register:
            for path in args.paths:
                self.script.db.register_tree(path)

        if args.deregister:
            for path in args.paths:
                self.script.db.unregister_tree(path)

        if args.update:
            for tree in self.script.db.trees:
                if args.paths and tree.path not in args.paths:
                    continue
                tree.update(self.script.db)

        if args.list:
            for tree in self.script.db.trees:
                print tree

script = Script()
CodecsCommand(script)
TagsCommand(script)
TracksCommand(script)
TreeCommand(script)
args = script.parse_args()

command = script.commands[args.command]
command.parse_args(args)




#!/usr/bin/env python
"""
Script to manipulate soundforest registered codecs and codec commands
"""

from systematic.shell import Script,ScriptError
from soundforest.database.models import Codec,SoundForestDB,SoundForestDBError
from soundforest.commands import DEFAULT_CODECS

USAGE = """Usage: %(script)s [options] <path>

Modify and list codecs and commands registered to soundforest database."""

script = Script()
script.set_usage(USAGE % {'script': script.name})
script.add_option('-l','--list-codecs',action='store_true',help='List codecs and extensions')
script.add_option('-c','--list-commands',action='store_true',help='List codec commands')
script.add_option('-r','--register',action='store_true',help='Register codec')
script.add_option('-u','--unregister',action='store_true',help='Unregister codec')
script.add_option('-e','--register-extensions',help='Register codec extensions')
script.add_option('-D','--register-defaults',action='store_true',help='Register default codecs')

(opts,args,codecs) = (None,None,None)
try:
    (opts,args) = script.parse_args()
except ScriptError,emsg:
    script.exit(1,emsg)

sfdb = None
try:
    sfdb = SoundForestDB()
except SoundForestDBError,emsg:
    script.exit(1,emsg)

if opts.register:
    if len(args)!=2:
        script.exit(1,'Registering codec requires name and description as arguments')
    try:
        sfdb.register_codec(name=args[0],description=args[1])
    except SoundForestDBError,emsg:
        script.exit(1,emsg)

if opts.unregister:
    if len(args)!=1:
        script.exit(1,'Registering codec requires name as argument')
    try:
        sfdb.unregister_codec(name=args[0])
    except SoundForestDBError,emsg:
        script.exit(1,emsg)

if opts.register_extensions:
    try:
        codec = sfdb.get_codec(opts.register_extensions)
        for ext in args:
            try:
                codec.register_extension(ext)
            except SoundForestDBError,emsg:
                script.exit(1,emsg)
    except SoundForestDBError,emsg:
        script.exit(1,emsg)

if opts.register_defaults:
    for name,details in DEFAULT_CODECS.items():
        if name in sfdb.get_registered_codecs():
            script.log.debug("Already Registered: %s" % name)
            continue
        codec = Codec(sfdb,name,details['description'])
        for extension in details['extensions']:
            if extension not in codec.extensions:
                codec.register_extension(extension)
        for encoder in details['encoders']:
            codec.register_encoder(encoder)
        for decoder in details['decoders']:
            codec.register_decoder(decoder)

if opts.list_codecs:
    for codec in sfdb.get_registered_codecs():
        print '%-8s %s' % (codec.name,','.join(codec.extensions))

if opts.list_commands:
    print
    for codec in sfdb.get_registered_codecs():
        if args and codec.name not in args:
            continue
        print 'Codec %s: %s' % (codec.name,codec.description)
        if not len(codec.encoders) and not len(codec.decoders):
            print '  No commands registered'
        for encoder in codec.encoders:
            print '  Encoder: %s ' % encoder
        for encoder in codec.decoders:
            print '  Decoder: %s' % encoder
        print


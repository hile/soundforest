#!/usr/bin/env python
"""
Script to manipulate soundforest registered codecs and codec commands
"""

from systematic.shell import Script, ScriptError
from soundforest.database.models import Codec, SoundForestDB, SoundForestDBError
from soundforest.commands import DEFAULT_CODECS

USAGE = """Usage: %(script)s [options] <path>

Modify and list codecs and commands registered to soundforest database."""

script = Script()
script.add_argument('-l', '--list-codecs', action='store_true', help='List codecs and extensions')
script.add_argument('-c', '--list-commands', action='store_true', help='List codec commands')
script.add_argument('-r', '--register', action='store_true', help='Register codec')
script.add_argument('-u', '--unregister', action='store_true', help='Unregister codec')
script.add_argument('-e', '--register-extensions', help='Register codec extensions')
script.add_argument('-D', '--register-defaults', action='store_true', help='Register default codecs')
script.add_argument('parameters', nargs='*', help='Codecs to process')
args = script.parse_args()

sfdb = None
try:
    sfdb = SoundForestDB()
except SoundForestDBError, emsg:
    script.exit(1, emsg)

if args.register:
    if len(args.parameters)!=2:
        script.exit(1, 'Registering codec requires name and description as arguments')
    try:
        sfdb.register_codec(name=args.parameters[0], description=args.parameters[1])
    except SoundForestDBError, emsg:
        script.exit(1, emsg)

if args.unregister:
    if len(args.parameters)!=1:
        script.exit(1, 'Registering codec requires name as argument')
    try:
        sfdb.unregister_codec(name=args.parameters[0])
    except SoundForestDBError, emsg:
        script.exit(1, emsg)

if args.register_extensions:
    try:
        codec = sfdb.get_codec(args.register_extensions)
        for ext in args.parameters:
            try:
                codec.register_extension(ext)
            except SoundForestDBError, emsg:
                script.exit(1, emsg)
    except SoundForestDBError, emsg:
        script.exit(1, emsg)

if args.register_defaults:
    for name, details in DEFAULT_CODECS.items():
        if name in sfdb.get_registered_codecs():
            script.log.debug("Already Registered: %s" % name)
            continue
        codec = Codec(sfdb, name, details['description'])
        for extension in details['extensions']:
            if extension not in codec.extensions:
                codec.register_extension(extension)
        for encoder in details['encoders']:
            codec.register_encoder(encoder)
        for decoder in details['decoders']:
            codec.register_decoder(decoder)

if args.list_codecs:
    for codec in sfdb.get_registered_codecs():
        print '%-8s %s' % (codec.name, ','.join(codec.extensions))

if args.list_commands:
    print
    for codec in sfdb.get_registered_codecs():
        if args.parameters and codec.name not in args.parameters:
            continue
        print 'Codec %s: %s' % (codec.name, codec.description)
        if not len(codec.encoders) and not len(codec.decoders):
            print '  No commands registered'
        for encoder in codec.encoders:
            print '  Encoder: %s ' % encoder
        for encoder in codec.decoders:
            print '  Decoder: %s' % encoder
        print


#!/usr/bin/env python
"""
Example script to list changes in soundforest trees after given timestamp.

If timestamp is not given, all changes are listed.
"""

from systematic.shell import Script,ScriptError
from soundforest.database.models import SoundForestDB,SoundForestDBError
from soundforest.database.models import FILE_ADDED,FILE_DELETED,FILE_MODIFIED

FILE_MSGS = {
    FILE_ADDED:     'Added',
    FILE_DELETED:   'Deleted',
    FILE_MODIFIED:  'Modified,'
}

DEFAULT_TREE_TYPE = 'Songs'

USAGE = """Usage: %(script)s [option]
List changes made to database trees, optionally limiting the data by timestamp.

This script is intended only as an example how to write watchers, but it still
works as advertised."""

script = Script()
script.set_usage(USAGE % {'script':script.name})
script.add_option('-s','--timestamp',type='int',help='Event start timestamp')
script.add_option('-S','--tree-source',help='Only show trees with this source')
script.add_option('-t','--tree-type',help='Tree type, default Songs')
(opts,args) = (None,None)
try:
    (opts,args) = script.parse_args()
except ScriptError,emsg:
    script.exit(1,emsg)

if opts.tree_type is not None:
    tree_type = opts.tree_type
else:
    tree_type = DEFAULT_TREE_TYPE

sfdb = SoundForestDB()

for tree in sfdb.trees:
    if opts.tree_source and tree.source != opts.tree_source:
        continue
    for event in tree.file_events(opts.timestamp):
        msg = FILE_MSGS[event['event']]
        print '%12d %8s %s' % (event['mtime'],msg,event['path'])

